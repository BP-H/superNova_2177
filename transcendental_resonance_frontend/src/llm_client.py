from __future__ import annotations

from typing import Any, Dict, List
import os

from quantum_futures import generate_speculative_payload, DISCLAIMER

# Default offline mode controlled by environment variable
_DEFAULT_OFFLINE = os.getenv("TR_OFFLINE", "0") == "1"


async def get_speculative_futures(
    node: Dict[str, Any],
    *,
    num_variants: int = 3,
    offline: bool | None = None,
) -> List[Dict[str, str]]:
    """Return speculative futures generated by the backend LLM.

    In offline mode deterministic placeholders are returned.
    """
    if offline is None:
        offline = _DEFAULT_OFFLINE

    if offline:
        # Deterministic placeholder payloads
        return [
            {"text": f"[offline] future {i + 1}", "disclaimer": DISCLAIMER}
            for i in range(max(1, num_variants))
        ]

    # Online mode would call a backend service; here we reuse local payloads
    return generate_speculative_payload(node, num_variants=num_variants)


__all__ = ["get_speculative_futures"]
