# STRICTLY A SOCIAL MEDIA PLATFORM
# Intellectual Property & Artistic Inspiration
# Legal & Ethical Safeguards
"""Abstract base class for resilient API clients.

This module defines :class:`BaseClient`, which standardizes offline behavior,
structured responses, and error handling for external service integrations.
It does not require any external packages beyond the Python standard library.
"""

from __future__ import annotations

import logging
import os
import uuid
from datetime import datetime, timezone
from typing import Any, Dict

logger = logging.getLogger(__name__)


class BaseClient:
    """Base functionality for API clients.

    Parameters
    ----------
    api_key:
        Authentication key for the remote service.
    api_url:
        Endpoint for the remote service.
    offline:
        Force offline mode. If ``None``, offline mode is enabled when
        the ``OFFLINE_MODE`` environment variable is set or when the key
        or URL are missing.
    """

    OFFLINE_ENV = "OFFLINE_MODE"
    OFFLINE_DISCLAIMER = "Offline mode placeholder result."
    API_DISCLAIMER = "Generated by remote service."

    def __init__(self, api_key: str | None = None, api_url: str | None = None, offline: bool | None = None) -> None:
        self.api_key = api_key or ""
        self.api_url = api_url or ""
        env_offline = os.getenv(self.OFFLINE_ENV, "").lower() in {"1", "true", "yes"}
        self.offline = bool(offline) or env_offline or not (self.api_key and self.api_url)
        if self.offline:
            logger.info("%s running in offline mode", self.__class__.__name__)

    # ------------------------------------------------------------------
    # helpers
    # ------------------------------------------------------------------
    @staticmethod
    def _trace_id() -> str:
        return str(uuid.uuid4())

    @staticmethod
    def _timestamp() -> str:
        return (
            datetime.now(timezone.utc)
            .replace(microsecond=0)
            .isoformat()
            .replace("+00:00", "Z")
        )

    def _format(self, payload: Dict[str, Any], source: str) -> Dict[str, Any]:
        """Attach tracing and source metadata."""
        payload = dict(payload)  # shallow copy
        payload.setdefault("source", source)
        payload["trace_id"] = self._trace_id()
        payload["timestamp"] = self._timestamp()
        return payload

    # ------------------------------------------------------------------
    def _offline_response(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        logger.debug("%s offline placeholder used", self.__class__.__name__)
        payload.setdefault("disclaimer", self.OFFLINE_DISCLAIMER)
        return self._format(payload, "offline")

    def _error_response(self, exc: Exception, payload: Dict[str, Any]) -> Dict[str, Any]:
        logger.error("%s API error: %s", self.__class__.__name__, exc)
        payload = {**payload, "error": str(exc)}
        payload.setdefault("disclaimer", self.OFFLINE_DISCLAIMER)
        return self._format(payload, "offline")

    def _api_response(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        payload.setdefault("disclaimer", self.API_DISCLAIMER)
        return self._format(payload, "api")

__all__ = ["BaseClient"]
