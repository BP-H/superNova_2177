# STRICTLY A SOCIAL MEDIA PLATFORM
# Intellectual Property & Artistic Inspiration
# Legal & Ethical Safeguards
name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    env:
      PYTHONPATH: ${{ github.workspace }}/transcendental_resonance_frontend/src
      STREAMLIT_PORT: ${{ env.STREAMLIT_PORT || '8888' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Continue even if the disclaimer check fails (e.g., missing git)
      - name: Check patch compliance
        if: github.event_name == 'pull_request'
        run: |
          python scripts/check_disclaimers.py origin/${{ github.event.pull_request.base.ref }} || echo 'Patch compliance check failed (missing git?)'
      - name: Install dependencies with fallback mirror
        run: |
          python -m pip install --upgrade pip
          if pip install -r requirements.txt -r requirements-minimal.txt -r requirements-dev.txt --index-url=https://pypi.org/simple; then
            echo "[INFO] Pip install succeeded using https://pypi.org/simple"
          else
            echo "[WARNING] Falling back to mirror: https://mirrors.aliyun.com/pypi/simple/"
            if pip install -r requirements.txt -r requirements-minimal.txt -r requirements-dev.txt --index-url=https://mirrors.aliyun.com/pypi/simple/; then
              echo "[INFO] Pip install succeeded using https://mirrors.aliyun.com/pypi/simple/"
            else
              echo "[ERROR] All pip index sources failed. Aborting."
              exit 1
            fi
          fi
          pip install -e .
      - name: Run pre-commit checks
        run: pre-commit run --all-files
      - run: mypy
      - run: pytest
      - name: Streamlit smoke test
        run: |
          PORT=${STREAMLIT_PORT:-8888}
          streamlit run ui.py --server.headless true --server.port "$PORT" >streamlit.log 2>&1 &
          for i in {1..30}; do
            if curl -f http://localhost:"$PORT" >/dev/null 2>&1; then
              echo "Streamlit started after $i seconds"
              break
            fi
            sleep 1
          done
          if ! curl -f http://localhost:"$PORT" >/dev/null 2>&1; then
            echo "Streamlit failed to start within timeout"
            pkill streamlit
            exit 1
          fi
          curl -f http://localhost:"$PORT"
          # Fallback health check query param
          curl -f "http://localhost:$PORT/?healthz=1"
          pkill streamlit
      - name: Print Streamlit logs on failure
        if: failure()
        run: |
          echo "::group::Streamlit logs"
          cat streamlit.log || true
          echo "::endgroup::"
      - name: Upload Streamlit log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: streamlit-log-python-${{ matrix.python-version }}
          path: streamlit.log
